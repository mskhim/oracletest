
DROP TABLE EMP01;
CREATE TABLE EMP01(
EMPNO NUMBER,
NAME VARCHAR2(20),
CONSTRAINT PK PRIMARY KEY(EMPNO)
);

CREATE OR REPLACE TRIGGER EMP_TG
AFTER DELETE
ON
EMP01
FOR EACH ROW
BEGIN
DELETE FROM EM  P02 WHERE EMPLOYEE_ID=:OLD.EMPLOYEE_ID;
END;
/
DELETE FROM EMP01 WHERE EMPLOYEE_ID=100;
SELECT * FROM EMP01;
SELECT * FROM EMP02;
DELETE FROM EMP01 WHERE EMPNO=2;

CREATE TABLE SAL01(
SALNO NUMBER(4), 
SAL NUMBER, 
EMPNO NUMBER(4), 
CONSTRAINT SAL01_PK PRIMARY KEY(SALNO), 
CONSTRAINT SAL01_FK FOREIGN KEY(EMPNO) REFERENCES EMP01(EMPNO) 
); 
--------------------------------------------------------
SELECT * FROM EMP01;
INSERT INTO EMP01 VALUES((SELECT (NVL(MAX(EMPNO),0)+1) FROM EMP01),'KIM');
SELECT * FROM SAL01;
SELECT * FROM PRODUCT;






---------------------------------------상품 트리거
ROLLBACK
--PRODUCT 테이블 추가
CREATE TABLE PRODUCT( 
PCODE CHAR(6),  -- 상품코드 
PNAME VARCHAR2(12) NOT NULL,-- 상품명 
PCOMPANY VARCHAR(12),  --제조사 
PPRICE NUMBER(8), -- 가격
STOCK NUMBER DEFAULT 0, -- 재고수량 
CONSTRAINT PRODUCT_PK PRIMARY KEY(PCODE) 
);
--PRODUCT 테이블에 값 입력
INSERT INTO PRODUCT VALUES((SELECT (NVL(MAX(PCODE),0)+1) FROM PRODUCT),DBMS_RANDOM.STRING('U',5),DBMS_RANDOM.STRING('U',5),3000,0);
--PRODUCT 테이블 출력
SELECT  * FROM PRODUCT;
DELETE FROM RECEIVING WHERE ROWNUM=1;
--PRODUCT PCODE 수정
UPDATE PRODUCT SET PCODE=1 WHERE PCODE=4;
--RECEIVING  테이블 추가
CREATE TABLE RECEIVING( 
 RNO NUMBER(6), -- 입고번호
 PCODE CHAR(6) ,   -- 상품코드
 RDATE DATE DEFAULT SYSDATE, -- 입고날짜 
 RQTY NUMBER(6), -- 입고수량 
 RPRICE NUMBER(8), -- 입고단가 
CONSTRAINT RECEIVING_PK PRIMARY KEY(RNO),
CONSTRAINT RECEIVING_FK FOREIGN KEY(PCODE) REFERENCES PRODUCT(PCODE) 
); 
--RECEIVING 테이블 값 입력
INSERT INTO RECEIVING(RNO,PCODE,RQTY,RPRICE) VALUES((SELECT (NVL(MAX(RNO),0)+1) FROM RECEIVING),2,10,5000);
--RECEIVING 테이블 출력
SELECT * FROM RECEIVING;
--TRIGGER 추가, RECEIVING에 데이터 입력시 같은 PCODE를 찾아서 수량 추가, 가격 변경
--CREATE OR REPLACE TRIGGER PRODUCT_STOCK_TRIGGER
--AFTER INSERT 
--ON 
--RECEIVING
--FOR EACH ROW
--BEGIN
--UPDATE PRODUCT SET STOCK=STOCK+:NEW.RQTY, PPRICE=:NEW.RPRICE 
--WHERE :NEW.PCODE=PCODE;
--END;

DROP TRIGGER RECEIVING_PCODE_UPDATE;
--RECEIVING 테이블에서 입고수량 수정시 PRODUCT에서 수정해주는 트리거
CREATE OR REPLACE TRIGGER RECEIVING_RQTY_UPDATE_TRG
AFTER UPDATE
ON
RECEIVING
FOR EACH ROW
BEGIN
UPDATE PRODUCT SET STOCK=STOCK-:OLD.RQTY+:NEW.RQTY, PPRICE=:NEW.RPRICE 
WHERE PCODE= :NEW.PCODE;
END;
/
CREATE OR REPLACE TRIGGER RECEIVING_STOCK_DELETE
AFTER DELETE
ON
RECEIVING
FOR EACH ROW
BEGIN
UPDATE PRODUCT SET STOCK=STOCK-:OLD.RQTY WHERE PCODE=:OLD.PCODE;
END;
/
--추가로 PRODUCT에서 RECEIVING에 제공하는 외래키 PCODE를 변경시 RECEIVING의 PCODE도 변경해주는 트리거
--CREATE OR REPLACE TRIGGER RECEIVING_PCODE_UPDATE
--AFTER UPDATE
--ON
--PRODUCT
--FOR EACH ROW
--WHEN (OLD.PCODE != NEW.PCODE) 
--BEGIN
--UPDATE RECEIVING SET PCODE=:NEW.PCODE WHERE PCODE=:OLD.PCODE;
--END;

CREATE OR REPLACE FUNCTION NF(FSAL IN NUMBER)
RETURN
VARCHAR2
IS
DNAME VARCHAR2(50);
BEGIN
SELECT DEPARTMENT_NAME INTO DNAME FROM DEPARTMENTS WHERE DEPARTMENT_ID=FSAL;
RETURN DNAME;
END;
/
SELECT NF(250) FROM DUAL;
CREATE OR REPLACE FUNCTION AVG_DEP_SALARY_FUNC(DEPNO EMPLOYEES.DEPARTMENT_ID%TYPE)
RETURN
NUMBER
IS
AVG_SAL NUMBER;
BEGIN
SELECT AVG(SALARY) INTO AVG_SAL FROM EMPLOYEES WHERE DEPNO=DEPARTMENT_ID;
RETURN AVG_SAL;
END;
/
SELECT AVG_DEP_SALARY_FUNC(30) FROM DUAL;