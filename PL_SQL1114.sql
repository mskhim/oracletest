DECLARE
TYPE NAME_TABLE_TYPE IS TABLE OF EMPLOYEES.FIRST_NAME%TYPE
INDEX BY BINARY_INTEGER;
TYPE JOB_TABLE_TYPE IS TABLE OF EMPLOYEES.JOB_ID%TYPE
INDEX BY BINARY_INTEGER;
TYPE DEPNO_TABLE_TYPE IS TABLE OF EMPLOYEES.DEPARTMENT_ID%TYPE
INDEX BY BINARY_INTEGER;
NAME_TABLE NAME_TABLE_TYPE;
JOB_TABLE JOB_TABLE_TYPE;
DEPNO_TABLE DEPNO_TABLE_TYPE; 
ROW_TABLE EMPLOYEES%ROWTYPE;
I BINARY_INTEGER:=1;
BEGIN
FOR ROW_TABLE IN (SELECT * FROM EMPLOYEES) LOOP
NAME_TABLE(I) := ROW_TABLE.FIRST_NAME;
JOB_TABLE(I) := ROW_TABLE.JOB_ID;
DEPNO_TABLE(I) := ROW_TABLE.DEPARTMENT_ID;
DBMS_OUTPUT.PUT_LINE(I||'번째/'||NAME_TABLE(I)||'/'||JOB_TABLE(I)||'/'||DEPNO_TABLE(I));
I:=I+1;
END LOOP;
END;
/
--수잔이름을 갖는 사원의사원번호와 사원명과 부서번호 출력
DECLARE
VEMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
VNAME EMPLOYEES.FIRST_NAME%TYPE;
VDEPARTMENY_ID EMPLOYEES.DEPARTMENT_ID%TYPE;
BEGIN
SELECT EMPLOYEE_ID, FIRST_NAME,DEPARTMENT_ID INTO VEMPLOYEE_ID,VNAME,VDEPARTMENY_ID FROM EMPLOYEES WHERE FIRST_NAME ='Susan';
DBMS_OUTPUT.PUT_LINE(VEMPLOYEE_ID||'/'||VNAME||'/'||VDEPARTMENY_ID);
END;
/

DECLARE
TYPE ROW_TABLE_TYPE IS TABLE OF EMPLOYEES%ROWTYPE
INDEX BY BINARY_INTEGER;
ROW_TABLE ROW_TABLE_TYPE;

BEGIN
SELECT * INTO ROW_TABLE(1) FROM EMPLOYEES WHERE MANAGER_ID IS NULL;
DBMS_OUTPUT.PUT_LINE(ROW_TABLE(2).FIRST_NAME);
END;
/

DECLARE
ROW_TABLE EMPLOYEES%ROWTYPE;
TOTAL_SALARY EMPLOYEES.SALARY%TYPE;
BEGIN
SELECT * INTO ROW_TABLE FROM EMPLOYEES WHERE MANAGER_ID IS NULL;
IF(ROW_TABLE.COMMISSION_PCT IS NULL)
THEN ROW_TABLE.COMMISSION_PCT :=0;
END IF;
TOTAL_SALARY := ROW_TABLE.SALARY*12+ROW_TABLE.COMMISSION_PCT*ROW_TABLE.SALARY;

DBMS_OUTPUT.PUT_LINE(TOTAL_SALARY);
END;
/
 

 
 DECLARE
 ROW_TABLE EMPLOYEES%ROWTYPE;
 MAX_TABLE EMPLOYEES.SALARY%TYPE;
 MIN_TABLE EMPLOYEES.SALARY%TYPE;
 AVG_TABLE EMPLOYEES.SALARY%TYPE;
 TE VARCHAR2(5 CHAR);
 BEGIN
  SELECT * INTO ROW_TABLE FROM EMPLOYEES WHERE EMPLOYEE_ID=ROUND(DBMS_RANDOM.VALUE(100,206));
  SELECT MAX(SALARY), MIN(SALARY), AVG(SALARY) INTO MAX_TABLE, MIN_TABLE,AVG_TABLE FROM EMPLOYEES E WHERE ROW_TABLE.DEPARTMENT_ID=E.DEPARTMENT_ID;
  IF (ROW_TABLE.SALARY > AVG_TABLE)  
  THEN TE :='보다 높'; 
  ELSIF (ROW_TABLE.SALARY < AVG_TABLE)  
  THEN TE :='보다 낮'; 
  ELSE
  TE :='과 같'; 
  END IF;
    DBMS_OUTPUT.PUT_LINE(ROW_TABLE.FIRST_NAME||'의 연봉은'||ROW_TABLE.SALARY||'으로, 부서 평균인'||AVG_TABLE||TE||'습니다. 부서의 최대 급여는'||MAX_TABLE||'이며, 최저는'||MIN_TABLE||'입니다.');
 END;
 /
 
 DECLARE
 X BINARY_INTEGER:=2;
 Y BINARY_INTEGER:=1;
 BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE('구구단 '||X||' 단');
        Y:=1;
        LOOP
             DBMS_OUTPUT.PUT_LINE(X||' X '||Y||' = '||X*Y);
             Y:=Y+1;
             IF Y>=10 
              THEN EXIT;
             END IF;
        END LOOP;
          X:=X+1;
      IF X>=10 
      THEN EXIT;
      END IF;
    END LOOP;
 END;
 /
 
 
 
 
 
 
 
 
 