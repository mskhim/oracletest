--
create table emp03
as
select * from employees;
select * from emp03;  
select * from DEPARTMENTS;
update emp03 set DEPARTMENT_ID='30';
ROllBACK;
update emp03 set salary=salary*1.1;
update emp03 set HIRE_DATE=sysdate;

update emp03 set DEPARTMENT_ID=30 where DEPARTMENT_ID=10;
update emp03 set SALARY=SALARY*1.1 WHERE SALARY>=3000;'

select e.FIRST_NAME, dp.DEPARTMENT_NAME, dp.department_id, 
case
when dp.DEPARTMENT_NAME='Marketing' then salary*1.05
when dp.DEPARTMENT_NAME='Purchasing' then salary*1.1
when dp.DEPARTMENT_NAME='Human Resources' then salary*1.15
when dp.DEPARTMENT_NAME='IT' then salary*1.20
else salary
end newsalary
,salary "기존 급여"
FROM employees e join DEPARTMENTS dp 
on e.DEPARTMENT_ID=dp.DEPARTMENT_ID
order by newsalary
;

CREATE TABLE DEPT01(
ID NUMBER(3), --PK
NAME VARCHAR2(15) NOT NULL,
COUNTRY VARCHAR2(15) NOT NULL
);
ALTER TABLE DEPT01 ADD CONSTRAINT DEPT01_ID_PK PRIMARY KEY(ID);
ALTER TABLE DEPT01 DROP CONSTRAINT DEPT01_ID_PK;
INSERT INTO DEPT01 VALUES(10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT01 VALUES(20,'RESEARCH','DALLAS');
INSERT INTO DEPT01 VALUES(30,'SALES','CHICAGO');
INSERT INTO DEPT01 VALUES(40,'OPERATIONS','BOSTON');

INSERT INTO MEMBER VALUES(799,'ALLEN','SALESMAN',1000,30);
INSERT INTO MEMBER VALUES(800,'JONES','MANAGER',1000,50);

ALTER TABLE DEPT01 RENAME COLUMN COUNTRY TO REGION;
CREATE TABLE EMPL(
ID NUMBER(3),--PK
NAME VARCHAR(15) NOT NULL,
JOB VARCHAR(15) NOT NULL,
SALARY NUMBER(4) NOT NULL,
DEPT_ID NUMBER(3)--FK
);
ALTER TABLE EMPL ADD CONSTRAINT EMPL_ID_PK PRIMARY KEY(ID);
ALTER TABLE EMPL ADD CONSTRAINT EMPL_DEPT_ID_FK FOREIGN KEY(DEPT_ID) REFERENCES DEPT01(ID) ON DELETE CASCADE; 
INSERT INTO EMPL VALUES(799,'ALLEN','SALESMAN',1000,30);
INSERT INTO EMPL VALUES(800,'JONES','MANAGER',1000,40);
SELECT * FROM DEPT01;
SELECT * FROM EMPL;

UPDATE DEPT01 SET ID=40 WHERE ID=80;
SELECT * FROM DEPT01 D JOIN EMPL E ON D.ID=E.DEPT_ID; 

DROP TRIGGER DEPT_ID_TRG;

--트리거 생성

--CREATE OR REPLACE TRIGGER DEPT_ID_TRG
--AFTER UPDATE OF ID ON DEPT01
--FOR EACH ROW
--BEGIN
--UPDATE EMPL 
--SET DEPT_ID=:NEW.ID
--WHERE DEPT_ID=:OLD.ID;
--END;

--1107 과제
--21. PAGE20 예제
CREATE TABLE EMP01(
CODE NUMBER(4) ,--PK
NAME VARCHAR2(10) NOT NULL,
JOB VARCHAR2(9),
MANAGER NUMBER(4),
HIRE_DATE DATE NOT NULL,
SALARY NUMBER(7,2) NOT NULL,
COMMITION NUMBER(7,2) DEFAULT 0.0,
DEP_CODE NUMBER(2)
);
ALTER TABLE EMP01 ADD CONSTRAINT EMP01_CODE_PK PRIMARY KEY(CODE);
--EMP01 테이블에 값 추가
INSERT INTO EMP01 VALUES(7369,'SMITH','CLEAK',7836,'80/12/17',800,0.0,20);
INSERT INTO EMP01 VALUES(7499,'ALLEN','SALESMAN',7369,'80/12/20',1600,300,30);
INSERT INTO EMP01 VALUES(7839,'KING','PRESIENT',NULL,'81/02/07',5000,0.0,10);

SELECT * FROM EMP01;

--회원정보 테이블 문제
CREATE TABLE MEMBERS(
ID VARCHAR2(20),--PK
NAME VARCHAR2(20) NOT NULL,
REG_NO VARCHAR2(13) NOT NULL,
PHONE VARCHAR2(13) NOT NULL,
ADRESS VARCHAR2(100) NOT NULL
);
ALTER TABLE MEMBERS ADD CONSTRAINT MEMBERS_ID_PK PRIMARY KEY(ID);
INSERT INTO MEMBERS VALUES('MSK','김민석','960825-','010-2909-5236','광주 어딘가');
INSERT INTO MEMBERS VALUES('MSK1','김민석','960825-','010-2909-5236','광주 어딘가');
INSERT INTO MEMBERS VALUES('MSK2','김민석','960825-','010-2909-5236','광주 어딘가');
INSERT INTO MEMBERS VALUES('MSK3','김민석','960825-','010-2909-5236','광주 어딘가');

SELECT * FROM MEMBERS;

--도서 정보 저장 테이블
CREATE TABLE BOOKS(
CODE NUMBER(4),--PK
TITLE VARCHAR2(50) NOT NULL,
COUNT NUMBER(6) NOT NULL,
PRICE NUMBER(10) NOT NULL,
PUBLISH VARCHAR2(50) NOT NULL
);
ALTER TABLE BOOKS ADD CONSTRAINT BOOKS_CODE_PK PRIMARY KEY(CODE);

INSERT INTO BOOKS VALUES(1234, '책이름', 10,20000,'출판사');
INSERT INTO BOOKS VALUES(1235, '책이름', 10,20000,'출판사');
INSERT INTO BOOKS VALUES(1236, '책이름', 10,20000,'출판사');

SELECT * FROM BOOKS;
--17장 PAGE 29 도서 관리 절차 테이블
------------------고객 테이블 만들기
CREATE TABLE CUSTOMERS(
CODE NUMBER(6),--PK
NAME VARCHAR2(20) NOT NULL,
AGE NUMBER(3) NOT NULL,
PHONE VARCHAR2(20),
ADDRESS VARCHAR2(50)
);
ALTER TABLE CUSTOMERS ADD CONSTRAINT CUSTOMERS_CODE_PK PRIMARY KEY(CODE);
INSERT INTO CUSTOMERS(CODE,NAME,AGE) VALUES(11113,'KIM',21);

SELECT * FROM CUSTOMERS;
------------------비디오 테이블 만들기
CREATE TABLE VIDEOS(
CODE NUMBER(5),--PK
TITLE VARCHAR2(50) NOT NULL,
GENRE VARCHAR2(30),
PAY NUMBER(7) NOT NULL,
LEND_STATE VARCHAR2(1),
COMPANY VARCHAR2(50),
MADE_DATE DATE,
AUDIENCE_RATE NUMBER(1)
);
ALTER TABLE VIDEOS MODIFY LEND_STATE VARCHAR2(1)DEFAULT 'N';
ALTER TABLE VIDEOS ADD CONSTRAINT VIDEOS_CODE_PK PRIMARY KEY(CODE);
ALTER TABLE VIDEOS ADD CONSTRAINT VIDEOS_LEND_STATE_D CHECK(LEND_STATE IN('Y','N'));
INSERT INTO VIDEOS(CODE,TITLE,PAY) VALUES(12348,'여름',6000);
SELECT * FROM VIDEOS;
------------------대여반납 테이블 만들기

CREATE TABLE LEND_RETURN(
CODE NUMBER(5),--PK
CUSTOMERS_CODE NUMBER(6),--FK
VIDEOS_CODE NUMBER(5),--FK
LEND_DATE DATE,
PLAN_DATE DATE,
TOTAL_PAY NUMBER(7)
);
DELETE FROM LEND_RETURN;
INSERT INTO LEND_RETURN(CODE,CUSTOMERS_CODE,VIDEOS_CODE) VALUES(00001,11111,12345);
ALTER TABLE LEND_RETURN ADD CONSTRAINT LEND_RETURN_CODE_PK PRIMARY KEY(CODE);
ALTER TABLE LEND_RETURN ADD CONSTRAINT LEND_RETURN_CUTOMERS_CODE_FK FOREIGN KEY(CUSTOMERS_CODE) REFERENCES CUSTOMERS(CODE) ON DELETE CASCADE;
ALTER TABLE LEND_RETURN ADD CONSTRAINT LEND_RETURN_VIDEOS_CODE_FK FOREIGN KEY(VIDEOS_CODE) REFERENCES VIDEOS(CODE) ON DELETE CASCADE;
SELECT * FROM LEND_RETURN;

--고객, 비디오 코드변호 변경시 LEND_RETURN의 코드번호도 바꿔주는 트리거
--CREATE OR REPLACE TRIGGER CUSTOMER_CODE_TRIGGER
--AFTER UPDATE OF CODE ON CUSTOMERS
--FOR EACH ROW
--BEGIN
--UPDATE LEND_RETURN
--SET CUSTOMERS_CODE=:NEW.CODE
--WHERE CUSTOMERS_CODE=:OLD.CODE;
--END;

--CREATE OR REPLACE TRIGGER VIDEO_CODE_TRIGGER
--AFTER UPDATE OF CODE ON VIDEOS
--FOR EACH ROW
--BEGIN
--UPDATE LEND_RETURN
--SET VIDEOS_CODE=:NEW.CODE
--WHERE VIDEOS_CODE=:OLD.CODE;
--END;
 
-- LEND_RETURN에 입력되면 해당하는 비디오 코드를 찾아 LEND_STATE를 Y로 바꿔주는 트리거
--CREATE OR REPLACE TRIGGER LENT_TRIGGER
--AFTER INSERT ON LEND_RETURN
--FOR EACH ROW
--BEGIN
--UPDATE VIDEOS
--SET LEND_STATE='Y'
--WHERE CODE=:NEW.VIDEOS_CODE;
--END;

--LEND_RETUNR에 VIDEOS의 가격을 가져와서 넣어주는 트리거
--CREATE OR REPLACE TRIGGER LEND_RETURN_PRICE_TG
--AFTER INSERT ON LEND_RETURN
--FOR EACH ROW
--DECLARE
--    PRAGMA AUTONOMOUS_TRANSACTION;
--BEGIN 
--UPDATE LEND_RETURN
--SET TOTAL_PAY= (SELECT PAY FROM VIDEOS WHERE CODE=:NEW.VIDEOS_CODE)
--WHERE CODE=:NEW.CODE;
--  COMMIT;  
--END;

select * from LEND_RETURN L join videos V ON L.VIDEOS_CODE=V.CODE
JOIN CUSTOMERS C ON L.CUSTOMERS_CODE=C.CODE;


------------------------------------------미래대학교 수강신청
CREATE SEQUENCE SUBJECT_NO_SEQ
START WITH 1
INCREMENT BY 1
;
CREATE TABLE SUBJECT(   --중복 허용하지 않는 컬럼(일련번호), 전체가 NOT NULL
NO NUMBER(2),    -- 일련번호 PK
NUM CHAR(2) NOT NULL,    --두자리로 구성 UQ STUDENT 의 SUBJECT_NUM의 부모키
NAME VARCHAR2(20) NOT NULL  -- UQ
);
ALTER TABLE SUBJECT ADD CONSTRAINT SUBJECT_NO_PK PRIMARY KEY(NO);
ALTER TABLE SUBJECT ADD CONSTRAINT SUBJECT_NUM_UQ UNIQUE(NUM);
ALTER TABLE SUBJECT ADD CONSTRAINT SUBJECT_NAME_UQ UNIQUE(NAME);



DROP TABLE STUDENT;
CREATE TABLE STUDENT(--중복 허용하지 않는 컬럼(일련번호), 전체가 NOT NULL
NO NUMBER(4),--일련번호 PK
NUM CHAR(8) NOT NULL,--학번은 8자리로 구성 연도_학과번호+일련번호 UQ
NAME VARCHAR(10) NOT NULL,
ID VARCHAR(20) NOT NULL,-- UQ
PWD VARCHAR(20) NOT NULL,
SUBJECT_NUM CHAR(2),--FK
JUMIN CHAR(14) NOT NULL,--UQ 000000-0000000
PHONE CHAR(13) NOT NULL,--UQ 000-0000-0000
ADRESS VARCHAR(50) NOT NULL,
EMAIL VARCHAR(30) NOT NULL,--UQ
REGIST_DATE DATE NOT NULL--SYSDATE
);
ALTER TABLE STUDENT ADD CONSTRAINT STUDENT_NO_PK PRIMARY KEY(NO);
ALTER TABLE STUDENT ADD CONSTRAINT STUDENT_NUM_UQ UNIQUE(NUM);
ALTER TABLE STUDENT ADD CONSTRAINT STUDENT_ID_UQ UNIQUE(ID);
ALTER TABLE STUDENT ADD CONSTRAINT STUDENT_SUBJECT_NUM_FK FOREIGN KEY(SUBJECT_NUM) REFERENCES SUBJECT(NUM) ON DELETE CASCADE;
ALTER TABLE STUDENT ADD CONSTRAINT STUDENT_JUMIN_UQ UNIQUE(JUMIN);
ALTER TABLE STUDENT ADD CONSTRAINT STUDENT_PHONE_UQ UNIQUE(PHONE);
ALTER TABLE STUDENT ADD CONSTRAINT STUDENT_EMAIL_UQ UNIQUE(EMAIL);
--학과 번호 변경시 학생 학과번호도 변경시켜주는 트리거
--CREATE OR REPLACE TRIGGER SUBJECT_NUM_TG
--AFTER UPDATE ON SUBJECT
--FOR EACH ROW
--BEGIN
--UPDATE STUDENT
--SET SUBJECT_NUM=:NEW.NUM
--WHERE SUBJECT_NUM=:OLD.NUM;
--END;



CREATE TABLE LESSON( --중복 허용하지 않는 컬럼(일련번호), NOT NULL
NO NUMBER(3), --PK
NUM CHAR(1) NOT NULL, --UQ
NAME VARCHAR2(15) NOT NULL --UQ
);
ALTER TABLE LESSON ADD CONSTRAINT LESSON_NO_PK PRIMARY KEY(NO);
ALTER TABLE LESSON ADD CONSTRAINT LESSON_NUM_UQ UNIQUE(NUM);
ALTER TABLE LESSON ADD CONSTRAINT LESSON_NAME_UQ UNIQUE(NAME);



CREATE TABLE TRAINEE(
NO NUMBER(8), --PK
STUDENT_NUM CHAR(8), --FK
LESSON_NUM CHAR(1), --KF
SECTION_NAME VARCHAR(10),--CULTURE, MAJOR, MINOR FK
RESIST_DATE DATE --SYSDATE
);

ALTER TABLE TRAINEE ADD CONSTRAINT TRAINEE_NO_PK PRIMARY KEY(NO);
ALTER TABLE TRAINEE ADD CONSTRAINT TRAINEE_STUDENT_NUM_FK FOREIGN KEY(STUDENT_NUM) REFERENCES STUDENT(NUM) ON DELETE CASCADE;
ALTER TABLE TRAINEE ADD CONSTRAINT TRAINEE_LESSON_NUM_FK FOREIGN KEY(LESSON_NUM) REFERENCES LESSON(NUM) ON DELETE CASCADE;
ALTER TABLE TRAINEE ADD CONSTRAINT TRAINEE_SECTION_NAME_FK FOREIGN KEY(SECTION_NAME) REFERENCES SECTION(NAME) ON DELETE CASCADE;

--수강신청의 외래키들 자동으로 수정시켜주는 트리거
--CREATE OR REPLACE TRIGGER TRAINEE_STUDENT_NUM_TG
--AFTER UPDATE ON SUBJECT
--FOR EACH ROW
--BEGIN
--UPDATE TRAINEE
--SET STUDENT_NUM=:NEW.NUM
--WHERE STUDENT_NUM=:OLD.NUM;
--END;
--
--CREATE OR REPLACE TRIGGER TRAINEE_LESSON_NUM_TG
--AFTER UPDATE ON LESSON
--FOR EACH ROW
--BEGIN
--UPDATE TRAINEE
--SET LESSON_NUM=:NEW.NUM
--WHERE LESSON_NUM=:OLD.NUM;
--END;
--
--CREATE OR REPLACE TRIGGER TRAINEE_SECTION_NAME_TG
--AFTER UPDATE ON SECTION
--FOR EACH ROW
--BEGIN
--UPDATE TRAINEE
--SET SECTION_NAME=:NEW.NAME
--WHERE SECTION_NAME=:OLD.NAME;
--END;



CREATE TABLE SECTION(
NO NUMBER(2)
NAME VARCHAR(10)--CULTURE, MAJOR, MINOR PK
);
ALTER TABLE SECTION ADD CONSTRAINT SECTION_NO_PK PRIMARY KEY(NO); 
ALTER TABLE SECTION ADD CONSTRAINT SECTION_NAME_UQ UNIQUE(NAME); 